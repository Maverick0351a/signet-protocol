"""Generate metrics documentation from server.pipeline.metrics module.

This script introspects the defined Prometheus metric objects and emits a Markdown
summary table including name, type, and help/description plus label names.

Usage:
  python scripts/generate_metrics_doc.py > docs/METRICS.md
"""
from __future__ import annotations
import inspect
import importlib
from prometheus_client.metrics import MetricWrapperBase
from typing import List

MODULE = "server.pipeline.metrics"

TYPE_MAP = {
    "Counter": "counter",
    "Histogram": "histogram",
    "Gauge": "gauge",
}

def collect() -> List[dict]:
    mod = importlib.import_module(MODULE)
    metrics = []
    for name, obj in inspect.getmembers(mod):
        if isinstance(obj, MetricWrapperBase):
            mtype = TYPE_MAP.get(obj._type, obj._type)
            # Access internal structure (prometheus_client does not expose a clean API for this)
            try:
                sample = obj.describe()[0]
                help_text = sample.documentation
            except Exception:
                help_text = ""  # best effort
            labelnames = getattr(obj, '_labelnames', ()) or ()
            metrics.append({
                "name": obj._name,
                "type": mtype,
                "help": help_text,
                "labels": list(labelnames),
            })
    # sort by name
    return sorted(metrics, key=lambda m: m["name"])  # type: ignore


def render(md_metrics: List[dict]) -> str:
    lines = [
        "# Signet Protocol Metrics",
        "",
        "This document is auto-generated by `scripts/generate_metrics_doc.py`. Do not edit manually.",
        "",
        "| Metric | Type | Labels | Description |",
        "|--------|------|--------|-------------|",
    ]
    for m in md_metrics:
        labels = ",".join(m["labels"]) if m["labels"] else "-"
        lines.append(f"| `{m['name']}` | {m['type']} | {labels} | {m['help']} |")
    return "\n".join(lines) + "\n"


def main():
    md = render(collect())
    print(md)

if __name__ == "__main__":
    main()
