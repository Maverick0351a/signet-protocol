name: release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish-api-spec:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed for creating GitHub release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate release notes
        id: notes
        run: |
          git fetch --tags --quiet
          CURRENT_TAG="${GITHUB_REF_NAME}"
          # Find previous core tag (exclude current) sorted by creation
          PREV_TAG=$(git tag --sort=-creatordate | grep '^v' | grep -v "^${CURRENT_TAG}$" | head -1 || true)
          echo "Previous tag: ${PREV_TAG}"
          {
            echo "# Signet Protocol ${CURRENT_TAG}";
            echo "";
            if [ -n "$PREV_TAG" ]; then
              RANGE="${PREV_TAG}..${CURRENT_TAG}";
            else
              RANGE="${CURRENT_TAG}";
            fi
            FEAT=$(git log $RANGE --pretty=format:'%s' | grep -E '^feat' || true)
            FIX=$(git log $RANGE --pretty=format:'%s' | grep -E '^fix' || true)
            DOCS=$(git log $RANGE --pretty=format:'%s' | grep -E '^docs' || true)
            CI=$(git log $RANGE --pretty=format:'%s' | grep -E '^ci' || true)
            if [ -n "$FEAT" ]; then
              echo "## Features"; echo "$FEAT" | sed 's/^/- /'; echo ""; fi
            if [ -n "$FIX" ]; then
              echo "## Fixes"; echo "$FIX" | sed 's/^/- /'; echo ""; fi
            if [ -n "$DOCS" ]; then
              echo "## Docs"; echo "$DOCS" | sed 's/^/- /'; echo ""; fi
            if [ -n "$CI" ]; then
              echo "## CI"; echo "$CI" | sed 's/^/- /'; echo ""; fi
            echo "## Spec"; echo "Spec snapshot: docs/api/openapi-${CURRENT_TAG#v}.yaml"; echo "";
            echo "_Generated automatically â€“ edit after publish for refinements._";
          } > release_notes.md
          echo "body_path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Determine spec path
        id: spec
        run: |
          VERSION="${GITHUB_REF_NAME}"
          # Expect a frozen versioned spec under docs/api/openapi-<version>.yaml
          CANDIDATE="docs/api/openapi-${VERSION}.yaml"
          if [ -f "$CANDIDATE" ]; then
            echo "spec_path=$CANDIDATE" >> "$GITHUB_OUTPUT"
          else
            echo "::warning title=Missing Versioned Spec::Expected $CANDIDATE; falling back to openapi.yaml"
            echo "spec_path=openapi.yaml" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Signet Protocol API ${{ github.ref_name }}
          body_path: release_notes.md
          files: ${{ steps.spec.outputs.spec_path }}
          draft: false
          prerelease: false

      - name: Upload spec as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec-${{ github.ref_name }}
          path: ${{ steps.spec.outputs.spec_path }}

      - name: Display confirmation
        run: echo "Published spec asset for version $GITHUB_REF_NAME from ${{ steps.spec.outputs.spec_path }}"

      - name: Future note
        run: |
          echo "To publish a new version:"
          echo "1. Copy openapi.yaml to docs/api/openapi-<new-version>.yaml"
          echo "2. Update README if needed."
          echo "3. Commit & push."
          echo "4. git tag -a <new-version> -m '...' && git push origin <new-version>."